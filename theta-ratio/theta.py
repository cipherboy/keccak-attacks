import hash_framework as hf
from hash_framework.boolean import *

import random, itertools, sys
from functools import partial

def sha3i(w, x, y, z):
    return w*(5*y + x) + z

def sha3ri(w, x, z):
    return w*x + z

def sha3rir(w, p):
    z = p % w
    x = (p - z) // w

    return (x, z)

def sha3r(w, p):
    z = p % w
    r = p // w
    x = r % 5
    r = r // 5
    y = r
    return (x, y, z)

def d_xor(f, ps):
    a = None
    for p in ps:
        if a == None:
            a = f[p]
        else:
            a = a ^ f[p]
    return a

def d_cxor(f, ips):
    ps = []
    w = len(f)//25
    for ip in ips:
        ps.append(sha3i(w, ip[0], ip[1], ip[2]))
    return d_xor(f, ps)

def flatten(A, w=1):
    arr = [None]*(25*w)
    for x in range(0, 5):
        for y in range(0, 5):
            for z in range(0, w):
                arr[sha3i(w, x, y, z)] = A[x][y][z]

    return arr


rtheta = hf.algorithms._sha3.sha3theta

def random_state(w=1):
    s = ""
    for i in range(0, 25*w):
        if random.randint(0, 1) == 0:
            s += "F"
        else:
            s += "T"

    return s

def theta(w=1, offsets=((-1, 0), (1, 1))):
    C = []
    D = []
    for i in range(0, 5):
        C.append([None] * w)
        D.append([None] * w)

    for x in range(0, 5):
        for z in range(0, w):
            C[x][z] = set([(x, 0, z), (x, 1, z), (x, 2, z), (x, 3, z), (x, 4, z)])

    for x in range(0, 5):
        for z in range(0, w):
            for offset in offsets:
                xo = offset[0]
                zo = offset[1]
                if D[x][z] == None:
                    D[x][z] = C[(x + xo) % 5][(z + zo) % w]
                else:
                    D[x][z] = D[x][z] ^ C[(x + xo) % 5][(z + zo) % w]

    A = []
    for x in range(0, 5):
        a = []
        for y in range(0, 5):
            a.append([None] * w)
        A.append(a)

    for x in range(0, 5):
        for y in range(0, 5):
            for z in range(0, w):
                A[x][y][z] = set([(x, y, z)]) ^ D[x][z]

    return A

def search_sat_ratio(w, offsets):
    Ap = theta(w, offsets)
    Apf = flatten(Ap, w)

    Cp = []
    Rp = []
    for i in range(0, 5):
        Cp.append([None] * w)
        Rp.append([None] * w)

    for x in range(0, 5):
        for z in range(0, w):
            Cpi = []
            Rpi = None
            for y in range(0, 5):
                Cpi.append((x, y, z))
                if Rpi == None:
                    Rpi = Ap[x][y][z]
                else:
                    Rpi = Rpi.intersection(Ap[x][y][z])
            Cp[x][z] = d_cxor(Apf, Cpi)
            Rp[x][z] = Rpi

    MCp = [None] * (5*w)
    MRp = [None] * (5*w)

    for rx in range(0, 5):
        for rz in range(0, w):
            p = sha3ri(w, rx, rz)
            Cs = ['F'] * (5*w)
            Rs = ['F'] * (5*w)

            for i in sorted(list(set(map(lambda y: sha3i(w, y[0], y[1], y[2]) % (5*w), Rp[rx][rz])))):
                Rs[i] = 'T'

            for i in sorted(list(set(map(lambda y: sha3i(w, y[0], y[1], y[2]) % (5*w), Cp[rx][rz])))):
                Cs[i] = 'T'

            MCp[p] = ''.join(Cs)
            MRp[p] = ''.join(Rs)

    results = {}

    p = 0
    tag = "keccak-attacks-theta-ratios-w" + str(w) + "-p" + str(p)

    m = hf.models()
    m.start(tag, recreate=True)
    hf.models.vars.write_header()
    hf.models.vars.write_assign(['cconstant', 'cresult'])

    cresult = ['and']
    for j in range(0, len(MRp[p])):
        oc = MRp[p][j]
        xor = ['xor']
        for i in range(0, 5*w):
            var = 'a' + str(i)
            value = MCp[i][j]
            xor.append(('and', var, value))
        xor = tuple(xor)
        cresult.append(('equal', oc, xor))
    cresult = tuple(cresult)
    hf.models.vars.write_clause('cresult', cresult, '01-problem.txt')

    cconstant = ['or']
    for i in range(0, 5*w):
        var = 'a' + str(i)
        cconstant.append(var)
    cconstant = tuple(cconstant)
    hf.models.vars.write_clause('cconstant', cconstant, '02-constants.txt')

    m.collapse()
    m.build()
    m.run(count=1)

    rg = m.load_results_generator()
    for r in rg:
        indices = []
        for i in range(0, 5*w):
            if r['a' + str(i)] == 'T':
                indices.append(i)
        print(r)
        print(indices)
        return len(list(indices))

    return None

def test_offsets():
    for w in [1, 2, 4, 8, 16, 32, 64]:
        A1 = theta(w, ((-1, 0), (1, 1)))
        A2 = theta(w, ((4, 0), (1, 1)))
        assert(A1 == A2)

test_offsets()

def build_offset_list(w):
    offset_list = []
    for xo in range(0, 5):
        for zo in range(0, w):
            offset_list.append((xo, zo))
    return offset_list

def ratio_stats(ratios):
    stats = {}
    for e in ratios:
        lo = len(e[0])
        w = e[1]
        if not lo in stats:
            stats[lo] = {}
        if not w in stats[lo]:
            stats[lo][w] = {'min': None, 'min_o': None, 'max': None, 'max_o': None,
                        'sum': 0, 'count': 0}

    for e in ratios:
        w = e[1]
        offsets = e[0]
        lo = len(offsets)
        value = ratios[e][0]
        if stats[lo][w]['min'] == None or stats[lo][w]['min'] > value:
            stats[lo][w]['min'] = value
            stats[lo][w]['min_o'] = offsets
        if stats[lo][w]['max'] == None or stats[lo][w]['max'] < value:
            stats[lo][w]['max'] = value
            stats[lo][w]['max_o'] = offsets
        stats[lo][w]['sum'] += value
        stats[lo][w]['count'] += 1
        stats[lo][w]['avg'] = stats[lo][w]['sum'] / stats[lo][w]['count']

    print(stats)

def offset_ratios():
    ratios = {}
    for w in [1, 2, 4, 8, 16, 32, 64]:
        for offset_count in range(1, 5):
            offset_list = build_offset_list(w)
            for ofs in itertools.combinations(range(len(offset_list)), offset_count):
                offset_tuple = []
                for of in ofs:
                    offset_tuple.append(offset_list[of])
                offset_tuple = tuple(offset_tuple)
                print(offset_tuple)


                r = search_sat_ratio(w, offsets=offset_tuple)
                if r != None:
                    ratios[(offset_tuple, w)] = (r, r/w)
    print(ratios)
    return ratios

stats = offset_ratios()

# stats = {(((0, 0),), 1): (1, 1.0), (((0, 0), (1, 0)), 1): (1, 1.0), (((0, 0), (2, 0)), 1): (1, 1.0), (((0, 0), (3, 0)), 1): (1, 1.0), (((0, 0), (4, 0)), 1): (1, 1.0), (((1, 0), (2, 0)), 1): (4, 4.0), (((1, 0), (3, 0)), 1): (4, 4.0), (((1, 0), (4, 0)), 1): (2, 2.0), (((2, 0), (3, 0)), 1): (2, 2.0), (((2, 0), (4, 0)), 1): (4, 4.0), (((3, 0), (4, 0)), 1): (4, 4.0), (((0, 0),), 2): (1, 0.5), (((0, 0), (0, 1)), 2): (1, 0.5), (((0, 0), (1, 0)), 2): (1, 0.5), (((0, 0), (1, 1)), 2): (1, 0.5), (((0, 0), (2, 0)), 2): (1, 0.5), (((0, 0), (2, 1)), 2): (1, 0.5), (((0, 0), (3, 0)), 2): (1, 0.5), (((0, 0), (3, 1)), 2): (1, 0.5), (((0, 0), (4, 0)), 2): (1, 0.5), (((0, 0), (4, 1)), 2): (1, 0.5), (((0, 1), (1, 0)), 2): (4, 2.0), (((0, 1), (1, 1)), 2): (4, 2.0), (((0, 1), (2, 0)), 2): (4, 2.0), (((0, 1), (2, 1)), 2): (4, 2.0), (((0, 1), (3, 0)), 2): (4, 2.0), (((0, 1), (3, 1)), 2): (4, 2.0), (((0, 1), (4, 0)), 2): (4, 2.0), (((0, 1), (4, 1)), 2): (4, 2.0), (((1, 0), (1, 1)), 2): (2, 1.0), (((1, 0), (2, 0)), 2): (4, 2.0), (((1, 0), (2, 1)), 2): (4, 2.0), (((1, 0), (3, 0)), 2): (4, 2.0), (((1, 0), (3, 1)), 2): (6, 3.0), (((1, 0), (4, 0)), 2): (2, 1.0), (((1, 0), (4, 1)), 2): (6, 3.0), (((1, 1), (2, 0)), 2): (6, 3.0), (((1, 1), (2, 1)), 2): (6, 3.0), (((1, 1), (3, 0)), 2): (4, 2.0), (((1, 1), (3, 1)), 2): (6, 3.0), (((1, 1), (4, 0)), 2): (6, 3.0), (((1, 1), (4, 1)), 2): (6, 3.0), (((2, 0), (2, 1)), 2): (2, 1.0), (((2, 0), (3, 0)), 2): (2, 1.0), (((2, 0), (3, 1)), 2): (6, 3.0), (((2, 0), (4, 0)), 2): (4, 2.0), (((2, 0), (4, 1)), 2): (4, 2.0), (((2, 1), (3, 0)), 2): (6, 3.0), (((2, 1), (3, 1)), 2): (6, 3.0), (((2, 1), (4, 0)), 2): (6, 3.0), (((2, 1), (4, 1)), 2): (6, 3.0), (((3, 0), (3, 1)), 2): (2, 1.0), (((3, 0), (4, 0)), 2): (4, 2.0), (((3, 0), (4, 1)), 2): (6, 3.0), (((3, 1), (4, 0)), 2): (4, 2.0), (((3, 1), (4, 1)), 2): (6, 3.0), (((4, 0), (4, 1)), 2): (2, 1.0), (((0, 0),), 4): (1, 0.25), (((0, 0), (0, 1)), 4): (1, 0.25), (((0, 0), (0, 2)), 4): (1, 0.25), (((0, 0), (0, 3)), 4): (1, 0.25), (((0, 0), (1, 0)), 4): (1, 0.25), (((0, 0), (1, 1)), 4): (1, 0.25), (((0, 0), (1, 2)), 4): (1, 0.25), (((0, 0), (1, 3)), 4): (1, 0.25), (((0, 0), (2, 0)), 4): (1, 0.25), (((0, 0), (2, 1)), 4): (1, 0.25), (((0, 0), (2, 2)), 4): (1, 0.25), (((0, 0), (2, 3)), 4): (1, 0.25), (((0, 0), (3, 0)), 4): (1, 0.25), (((0, 0), (3, 1)), 4): (1, 0.25), (((0, 0), (3, 2)), 4): (1, 0.25), (((0, 0), (3, 3)), 4): (1, 0.25), (((0, 0), (4, 0)), 4): (1, 0.25), (((0, 0), (4, 1)), 4): (1, 0.25), (((0, 0), (4, 2)), 4): (1, 0.25), (((0, 0), (4, 3)), 4): (1, 0.25), (((0, 1), (0, 2)), 4): (2, 0.5), (((0, 1), (0, 3)), 4): (2, 0.5), (((0, 1), (1, 0)), 4): (10, 2.5), (((0, 1), (1, 1)), 4): (10, 2.5), (((0, 1), (1, 2)), 4): (10, 2.5), (((0, 1), (1, 3)), 4): (10, 2.5), (((0, 1), (2, 0)), 4): (10, 2.5), (((0, 1), (2, 1)), 4): (10, 2.5), (((0, 1), (2, 2)), 4): (10, 2.5), (((0, 1), (2, 3)), 4): (10, 2.5), (((0, 1), (3, 0)), 4): (10, 2.5), (((0, 1), (3, 1)), 4): (10, 2.5), (((0, 1), (3, 2)), 4): (10, 2.5), (((0, 1), (3, 3)), 4): (10, 2.5), (((0, 1), (4, 0)), 4): (10, 2.5), (((0, 1), (4, 1)), 4): (10, 2.5), (((0, 1), (4, 2)), 4): (10, 2.5), (((0, 1), (4, 3)), 4): (10, 2.5), (((0, 2), (0, 3)), 4): (2, 0.5), (((0, 2), (1, 0)), 4): (4, 1.0), (((0, 2), (1, 1)), 4): (4, 1.0), (((0, 2), (1, 2)), 4): (4, 1.0), (((0, 2), (1, 3)), 4): (4, 1.0), (((0, 2), (2, 0)), 4): (4, 1.0), (((0, 2), (2, 1)), 4): (4, 1.0), (((0, 2), (2, 2)), 4): (4, 1.0), (((0, 2), (2, 3)), 4): (4, 1.0), (((0, 2), (3, 0)), 4): (4, 1.0), (((0, 2), (3, 1)), 4): (4, 1.0), (((0, 2), (3, 2)), 4): (4, 1.0), (((0, 2), (3, 3)), 4): (4, 1.0), (((0, 2), (4, 0)), 4): (4, 1.0), (((0, 2), (4, 1)), 4): (4, 1.0), (((0, 2), (4, 2)), 4): (4, 1.0), (((0, 2), (4, 3)), 4): (4, 1.0), (((0, 3), (1, 0)), 4): (10, 2.5), (((0, 3), (1, 1)), 4): (10, 2.5), (((0, 3), (1, 2)), 4): (10, 2.5), (((0, 3), (1, 3)), 4): (10, 2.5), (((0, 3), (2, 0)), 4): (10, 2.5), (((0, 3), (2, 1)), 4): (10, 2.5), (((0, 3), (2, 2)), 4): (10, 2.5), (((0, 3), (2, 3)), 4): (10, 2.5), (((0, 3), (3, 0)), 4): (10, 2.5), (((0, 3), (3, 1)), 4): (10, 2.5), (((0, 3), (3, 2)), 4): (10, 2.5), (((0, 3), (3, 3)), 4): (10, 2.5), (((0, 3), (4, 0)), 4): (10, 2.5), (((0, 3), (4, 1)), 4): (10, 2.5), (((0, 3), (4, 2)), 4): (10, 2.5), (((0, 3), (4, 3)), 4): (10, 2.5), (((1, 0), (1, 1)), 4): (8, 2.0), (((1, 0), (1, 2)), 4): (2, 0.5), (((1, 0), (1, 3)), 4): (8, 2.0), (((1, 0), (2, 0)), 4): (4, 1.0), (((1, 0), (2, 1)), 4): (12, 3.0), (((1, 0), (2, 2)), 4): (4, 1.0), (((1, 0), (2, 3)), 4): (12, 3.0), (((1, 0), (3, 0)), 4): (4, 1.0), (((1, 0), (3, 1)), 4): (10, 2.5), (((1, 0), (3, 2)), 4): (6, 1.5), (((1, 0), (3, 3)), 4): (10, 2.5), (((1, 0), (4, 0)), 4): (2, 0.5), (((1, 0), (4, 1)), 4): (10, 2.5), (((1, 0), (4, 2)), 4): (6, 1.5), (((1, 0), (4, 3)), 4): (10, 2.5), (((1, 1), (1, 2)), 4): (8, 2.0), (((1, 1), (1, 3)), 4): (2, 0.5), (((1, 1), (2, 0)), 4): (10, 2.5), (((1, 1), (2, 1)), 4): (12, 3.0), (((1, 1), (2, 2)), 4): (14, 3.5), (((1, 1), (2, 3)), 4): (12, 3.0), (((1, 1), (3, 0)), 4): (12, 3.0), (((1, 1), (3, 1)), 4): (12, 3.0), (((1, 1), (3, 2)), 4): (10, 2.5), (((1, 1), (3, 3)), 4): (12, 3.0), (((1, 1), (4, 0)), 4): (10, 2.5), (((1, 1), (4, 1)), 4): (10, 2.5), (((1, 1), (4, 2)), 4): (12, 3.0), (((1, 1), (4, 3)), 4): (12, 3.0), (((1, 2), (1, 3)), 4): (8, 2.0), (((1, 2), (2, 0)), 4): (6, 1.5), (((1, 2), (2, 1)), 4): (10, 2.5), (((1, 2), (2, 2)), 4): (6, 1.5), (((1, 2), (2, 3)), 4): (10, 2.5), (((1, 2), (3, 0)), 4): (4, 1.0), (((1, 2), (3, 1)), 4): (14, 3.5), (((1, 2), (3, 2)), 4): (6, 1.5), (((1, 2), (3, 3)), 4): (14, 3.5), (((1, 2), (4, 0)), 4): (6, 1.5), (((1, 2), (4, 1)), 4): (12, 3.0), (((1, 2), (4, 2)), 4): (6, 1.5), (((1, 2), (4, 3)), 4): (12, 3.0), (((1, 3), (2, 0)), 4): (10, 2.5), (((1, 3), (2, 1)), 4): (12, 3.0), (((1, 3), (2, 2)), 4): (14, 3.5), (((1, 3), (2, 3)), 4): (12, 3.0), (((1, 3), (3, 0)), 4): (12, 3.0), (((1, 3), (3, 1)), 4): (12, 3.0), (((1, 3), (3, 2)), 4): (10, 2.5), (((1, 3), (3, 3)), 4): (12, 3.0), (((1, 3), (4, 0)), 4): (10, 2.5), (((1, 3), (4, 1)), 4): (12, 3.0), (((1, 3), (4, 2)), 4): (12, 3.0), (((1, 3), (4, 3)), 4): (10, 2.5), (((2, 0), (2, 1)), 4): (8, 2.0), (((2, 0), (2, 2)), 4): (2, 0.5), (((2, 0), (2, 3)), 4): (8, 2.0), (((2, 0), (3, 0)), 4): (2, 0.5), (((2, 0), (3, 1)), 4): (10, 2.5), (((2, 0), (3, 2)), 4): (6, 1.5), (((2, 0), (3, 3)), 4): (10, 2.5), (((2, 0), (4, 0)), 4): (4, 1.0), (((2, 0), (4, 1)), 4): (12, 3.0), (((2, 0), (4, 2)), 4): (4, 1.0), (((2, 0), (4, 3)), 4): (12, 3.0), (((2, 1), (2, 2)), 4): (8, 2.0), (((2, 1), (2, 3)), 4): (2, 0.5), (((2, 1), (3, 0)), 4): (10, 2.5), (((2, 1), (3, 1)), 4): (10, 2.5), (((2, 1), (3, 2)), 4): (12, 3.0), (((2, 1), (3, 3)), 4): (12, 3.0), (((2, 1), (4, 0)), 4): (10, 2.5), (((2, 1), (4, 1)), 4): (12, 3.0), (((2, 1), (4, 2)), 4): (14, 3.5), (((2, 1), (4, 3)), 4): (12, 3.0), (((2, 2), (2, 3)), 4): (8, 2.0), (((2, 2), (3, 0)), 4): (6, 1.5), (((2, 2), (3, 1)), 4): (12, 3.0), (((2, 2), (3, 2)), 4): (6, 1.5), (((2, 2), (3, 3)), 4): (12, 3.0), (((2, 2), (4, 0)), 4): (6, 1.5), (((2, 2), (4, 1)), 4): (10, 2.5), (((2, 2), (4, 2)), 4): (6, 1.5), (((2, 2), (4, 3)), 4): (10, 2.5), (((2, 3), (3, 0)), 4): (10, 2.5), (((2, 3), (3, 1)), 4): (12, 3.0), (((2, 3), (3, 2)), 4): (12, 3.0), (((2, 3), (3, 3)), 4): (10, 2.5), (((2, 3), (4, 0)), 4): (10, 2.5), (((2, 3), (4, 1)), 4): (12, 3.0), (((2, 3), (4, 2)), 4): (14, 3.5), (((2, 3), (4, 3)), 4): (12, 3.0), (((3, 0), (3, 1)), 4): (8, 2.0), (((3, 0), (3, 2)), 4): (2, 0.5), (((3, 0), (3, 3)), 4): (8, 2.0), (((3, 0), (4, 0)), 4): (4, 1.0), (((3, 0), (4, 1)), 4): (10, 2.5), (((3, 0), (4, 2)), 4): (6, 1.5), (((3, 0), (4, 3)), 4): (10, 2.5), (((3, 1), (3, 2)), 4): (8, 2.0), (((3, 1), (3, 3)), 4): (2, 0.5), (((3, 1), (4, 0)), 4): (12, 3.0), (((3, 1), (4, 1)), 4): (12, 3.0), (((3, 1), (4, 2)), 4): (10, 2.5), (((3, 1), (4, 3)), 4): (12, 3.0), (((3, 2), (3, 3)), 4): (8, 2.0), (((3, 2), (4, 0)), 4): (4, 1.0), (((3, 2), (4, 1)), 4): (14, 3.5), (((3, 2), (4, 2)), 4): (6, 1.5), (((3, 2), (4, 3)), 4): (14, 3.5), (((3, 3), (4, 0)), 4): (12, 3.0), (((3, 3), (4, 1)), 4): (12, 3.0), (((3, 3), (4, 2)), 4): (10, 2.5), (((3, 3), (4, 3)), 4): (12, 3.0), (((4, 0), (4, 1)), 4): (8, 2.0), (((4, 0), (4, 2)), 4): (2, 0.5), (((4, 0), (4, 3)), 4): (8, 2.0), (((4, 1), (4, 2)), 4): (8, 2.0), (((4, 1), (4, 3)), 4): (2, 0.5), (((4, 2), (4, 3)), 4): (8, 2.0)}

ratio_stats(stats)
